import io
from collections.abc import Mapping

import pytest

from prism.overlay.keybinds import AlphanumericKey, Key
from prism.overlay.settings import Settings, fill_missing_settings
from prism.overlay.user_interaction.settings_prompt import prompt_if_no_autowho
from tests.prism.overlay.test_settings import make_settings_dict
from tests.prism.overlay.utils import make_settings


def alphanumeric_key(char: str) -> Key:
    return AlphanumericKey(name=char, char=char)


@pytest.mark.parametrize(
    "incomplete_settings, result, should_update",
    (
        # Not updated
        ({"autowho": True}, make_settings(autowho=True), False),
        (
            {"autowho": False, "chat_hotkey": alphanumeric_key("u").to_dict()},
            make_settings(autowho=False, chat_hotkey=alphanumeric_key("u")),
            False,
        ),
        # Important that the default settings don't lead to an update
        (
            make_settings_dict(stats_thread_count=make_settings().stats_thread_count),
            make_settings(),
            False,
        ),
        (
            fill_missing_settings({}, make_settings().stats_thread_count)[0],
            make_settings(),
            False,
        ),
        # Invalid value for autowho, but probably not first launch
        ({"autowho": ""}, make_settings(), False),
        # Updated
        # NOTE: Update called, but settings are the same
        (
            {},
            make_settings(chat_hotkey=alphanumeric_key("r")),
            True,
        ),
        (
            {"chat_hotkey": alphanumeric_key("u").to_dict()},
            make_settings(autowho=True, chat_hotkey=alphanumeric_key("r")),
            True,
        ),
        (
            {
                "antisniper_api_key": "123",
                "chat_hotkey": alphanumeric_key("u").to_dict(),
                "autowho_delay": 1.3,
            },
            make_settings(
                antisniper_api_key="123",
                chat_hotkey=alphanumeric_key("r"),
                autowho_delay=1.3,
            ),
            True,
        ),
        (
            {},
            make_settings(chat_hotkey=alphanumeric_key("r")),
            True,
        ),
    ),
)
def test_prompt_if_no_autowho(
    incomplete_settings: Mapping[str, object],
    result: Settings,
    should_update: bool,
) -> None:
    def prompt(settings: Settings) -> tuple[bool, Key]:
        return True, alphanumeric_key("r")

    settings_dict, _ = fill_missing_settings(
        incomplete_settings, make_settings().stats_thread_count
    )

    settings = Settings.from_dict(
        settings_dict, write_settings_file_utf8=lambda: io.StringIO()
    )
    # User id is randomly generated by fill_missing_settings
    settings.user_id = make_settings().user_id

    new_settings, updated = prompt_if_no_autowho(
        settings, incomplete_settings, prompt=prompt
    )
    assert new_settings == result
    assert updated == should_update
