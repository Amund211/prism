name: Python testing

permissions:
  contents: read

on: [push, workflow_dispatch]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-13]
    defaults:
      run:
        shell: bash  # For `source`
    steps:
    - uses: actions/checkout@v5
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        prune-cache: false # Pruning the cache seems to hang :^(

    - name: OS specific setup (windows)
      if: startswith(matrix.os, 'windows')
      run: |
        echo 'OS_NAME=windows' >> $GITHUB_ENV
        echo 'RESULT_EXTENSION=.exe' >> $GITHUB_ENV
        echo 'PYINSTALLER_ARGS=--hide-console=minimize-early --onefile' >> $GITHUB_ENV
        echo 'INSTALL_CA_CERT=certutil.exe -addstore root local-ca.pem' >> $GITHUB_ENV
    - name: OS specific setup (linux)
      if: startswith(matrix.os, 'ubuntu')
      run: |
        echo 'OS_NAME=linux' >> $GITHUB_ENV
        echo 'RESULT_EXTENSION=' >> $GITHUB_ENV
        echo 'PYINSTALLER_ARGS=--onefile' >> $GITHUB_ENV
        echo 'INSTALL_CA_CERT=sudo cp local-ca.pem /usr/local/share/ca-certificates/local-ca.crt; sudo update-ca-certificates' >> $GITHUB_ENV
    - name: OS specific setup (mac)
      if: startswith(matrix.os, 'macOS')
      run: |
        echo 'OS_NAME=mac' >> $GITHUB_ENV
        # Upload the built .dmg app-installer
        echo 'RESULT_EXTENSION=.dmg' >> $GITHUB_ENV
        # Target universal2 so that the built binary can run on both intel and apple silicon
        # Pass --windowed to build a .app bundle
        # Use --onedir instead of --onefile to avoid repeated security scans on startup
        echo 'PYINSTALLER_ARGS=--target-architecture universal2 --windowed --onedir' >> $GITHUB_ENV
        echo 'INSTALL_CA_CERT=sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain local-ca.pem' >> $GITHUB_ENV

    - name: Install dependencies
      run: |
        uv sync

        VERSION_STRING="$(uv run python -c 'from prism import VERSION_STRING; print(VERSION_STRING)')"
        echo "VERSION_STRING=$VERSION_STRING" >> $GITHUB_ENV
        echo "SIMPLE_NAME=prism-$VERSION_STRING" >> $GITHUB_ENV
        echo "BUILD_RESULT_NAME=prism-$VERSION_STRING-${{Â env.OS_NAME }}${{ env.RESULT_EXTENSION }}" >> $GITHUB_ENV

    - name: Run typechecking
      run: |
        uv run mypy --strict .

    - name: Run tests
      run: |
        uv run coverage run
        uv run coverage report

    - name: tee | stderr
      if: env.OS_NAME != 'windows'
      run:
        echo 'TEE_STDERR=| tee /dev/stderr' >> $GITHUB_ENV

    - name: Test ssl system certs
      run: |
        certifi_ca_certs="$(uv run python -m certifi)"

        (
          cd tests/system_certs

          echo 'Print certs' >&2
          sh print.sh

          echo "Run local https server and ensure it's running" >&2
          uv run server.py >/dev/null 2>&1 &
          sleep 1

          echo 'Ensure request succeeds with local ca' >&2
          curl --ssl-no-revoke --fail --silent https://localhost:12345 --cacert local-ca.pem ${{ env.TEE_STDERR }} | grep '^Hello world' >/dev/null 2>&1

          echo 'Ensure request fails with certifi ca' >&2
          ! curl --ssl-no-revoke --fail https://localhost:12345 --cacert "$certifi_ca_certs" 2>&1 ${{ env.TEE_STDERR }} | grep 'SSL certificate problem' >/dev/null 2>&1

          echo 'Install certs' >&2
          ${{ env.INSTALL_CA_CERT }}
        )

        # Create placeholder logfile
        touch latest.log

        echo 'Ensure ssl error is caught when using included certs' >&2
        echo 'use_included_certs = true' > included_certs_settings.toml
        # Don't open the settings prompt
        echo 'autowho = true' >> included_certs_settings.toml

        uv run prism_overlay.py --test-ssl --settings=included_certs_settings.toml --logfile=latest.log ${{ env.TEE_STDERR }} | grep '^Caught missing local issuer SSLError: ' >/dev/null 2>&1

        echo 'Ensure request succeeds when using system certs' >&2
        echo 'use_included_certs = false' > system_certs_settings.toml
        # Don't open the settings prompt
        echo 'autowho = true' >> system_certs_settings.toml

        uv run prism_overlay.py --test-ssl --settings=system_certs_settings.toml --logfile=latest.log ${{ env.TEE_STDERR }} | grep '^Got response: Hello world' >/dev/null 2>&1

    - name: Build binary with pyinstaller
      run: |
        uv run add_version_to_icon.py  # Create the icon file
        uv run pyinstaller prism_overlay.py --noconfirm --icon=pyinstaller/who_with_version.ico --name "${{ env.SIMPLE_NAME }}" --additional-hooks-dir=pyinstaller ${{ env.PYINSTALLER_ARGS }}

    - name: Prepare to package app bundle to disk image (mac)
      if: env.OS_NAME == 'mac'
      run: |
        brew install imagemagick
        magick pyinstaller/who_with_version.ico pyinstaller/who_with_version.icns

        brew install create-dmg

        mkdir -p 'dist/app'
        mv "dist/${{ env.SIMPLE_NAME }}.app" "dist/app"

    - name: Package app bundle to disk image (mac)
      if: env.OS_NAME == 'mac'
      run: |
        # Workaround for https://github.com/actions/runner-images/issues/7522
        max_retries=10
        for i in $(seq 1 $max_retries); do
          # Inspired by:
          # https://www.pythonguis.com/tutorials/packaging-pyqt5-applications-pyinstaller-macos-dmg/
          if create-dmg \
            --volname "Prism ${{ env.VERSION_STRING }} installer" \
            --volicon 'pyinstaller/who_with_version.icns' \
            --window-pos 200 120 \
            --window-size 600 300 \
            --icon-size 100 \
            --icon "${{ env.SIMPLE_NAME }}.app" 175 120 \
            --hide-extension "${{ env.SIMPLE_NAME }}.app" \
            --app-drop-link 425 120 \
            "${{ env.BUILD_RESULT_NAME }}" \
            "dist/app/"; then
            # Success -> continue with next step
            exit 0
          fi

          echo "create-dmg failed, retrying ($i/$max_retries)" >&2
        done

        echo "create-dmg failed $max_retries times in a row" >&2
        exit 1

    - name: Store built binary (non-mac)
      if: env.OS_NAME != 'mac'
      run: |
        mv "dist/${{ env.SIMPLE_NAME }}${{ env.RESULT_EXTENSION }}" "${{ env.BUILD_RESULT_NAME }}"

    - name: Upload built binary/app .dmg
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.SIMPLE_NAME }}-${{ matrix.os }}
        path: "${{ env.BUILD_RESULT_NAME }}"
        if-no-files-found: error
